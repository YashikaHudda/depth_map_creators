# -*- coding: utf-8 -*-
"""Mega depth.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WGDFEJTm-2cK4HDy3Gzq4yiNvX1bcLAL

"""
import streamlit as st

# Set the title of the Streamlit app




#!pip install --upgrade timm==0.6.7 torch==2.0.1 torchvision==0.15.2 numpy==1.23.5 pillow==9.4.0





import torch
import torchvision.transforms as T
from PIL import Image
#from google.colab import files
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the MegaDepth model
def load_model(weight_path):
  model = torch.hub.load("intel-isl/MiDaS", "MiDaS_small", "megadepth_model")  # Replace with your MegaDepth model call
  model.eval()  # Set the model to evaluation mode
  return model

# Preprocess the input image
def preprocess_image(image):
      transform = T.Compose([
          T.Resize((384, 384)),  # Resize image to MegaDepth's input size
          T.ToTensor(),
          T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ])
      return transform(image).unsqueeze(0)  # Add batch dimension


# Estimate the depth map
def estimate_depth(image_path, model):
      image = Image.open(image_path).convert("RGB")
      input_tensor = preprocess_image(image)

      with torch.no_grad():
         output = model(input_tensor)
         depth_map = output.squeeze().cpu().numpy()  # Adjust based on the model's output
         depth_map = cv2.resize(depth_map, (image.width, image.height), interpolation=cv2.INTER_LINEAR)
         depth_map = (depth_map - depth_map.min()) / (depth_map.max() - depth_map.min())  # Normalize to [0, 1]
         depth_map = (depth_map * 255).astype(np.uint8)
         depth_map = cv2.applyColorMap(depth_map, cv2.COLORMAP_JET)
         depth_map = cv2.cvtColor(depth_map, cv2.COLOR_BGR2RGB)




      return depth_map

# Step 4: Uploading images from Google Colab
#uploaded = files.upload()  # Prompt user to upload files

# Processing each uploaded file
def main():
    st.title("MegaDepth Model Depth Estimation")
    st.write("Upload an image to estimate its depth map using the MegaDepth model.")

    # File uploader widget
    uploaded_file = st.file_uploader("Choose an image file", type=["jpg", "jpeg", "png"])
    weight_path = st.text_input("Enter the path to the MegaDepth model weights", "")
    if uploaded_file is not None:
        # Display the uploaded image
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # Load MegaDepth model
        model = load_model( weight_path)

        # Estimate depth map
        st.write("Estimating depth map...")
        depth_map = estimate_depth(image, model)

        # Display the depth map
        st.write("Depth map:")
        plt.figure(figsize=(10, 5))
        plt.imshow(depth_map, cmap="plasma")
        plt.colorbar()
        st.pyplot(plt)

if __name__ == "__main__":
    main()
